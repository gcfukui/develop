declare namespace GC {
    export namespace InputMan {

        /**
         * Represents the license key for evaluation version and production version.
         */
        var LicenseKey: string;

        export enum EditMode {
            Insert = "insert",
            Overwrite = "overwrite",
            FixedInsert = "fixedinsert",
            FixedOverwrite = "fixedoverwrite",
        }

        export enum CrLfMode {
            /*
             * Accepts all CrLf characters in copied, cut, or pasted strings.
             */
            NoControl = "nocontrol",
            /*
             * Removes all CrLf characters in copied, cut, or pasted strings.
             */
            Filter = "filter",
            /*
             * Cuts the following strings from the first CrLf character in copied, cut, and pasted strings.
             */
            Cut = "cut",
        }

        export enum ExitOnLeftRightKey {
            None = "none",
            Left = "left",
            Right = "right",
            Both = "both",
        }

        export enum HighlightText {
            /*
             * No selection specified.
             */
            None = "none",
            /*
             * Select the specified field.
             */
            Field = "field",
            /*
             * Select all the text.
             */
            All = "all",
        }

        export enum ValueSign {
            NoControl = "nocontrol",
            Positive = "positive",
            Negative = "negative",
        }

        export enum Hour12Mode {
            Hour0As12 = "hour0as12",
            Hour12As0 = "hour12as0",
        }

        export enum TabAction {
            Control = "control",
            Field = "field",
        }

        /*
     * Defines how to process the <i>Date.Value</i>, <i>Number.Value</i> property when it is invalid during inputting.
     * @type {{AdjustToMaxMin= string, Clear= string, Restore= string, CancelInput= string, Keep= string}}
     */
        export enum MaxMinBehavior {
            /*
             * Adjust the value to the valid between the minimum and maximum.If the value is less than the minimum, adjust to the minimum. If the value is greater than the maximum, adjust to maximum.
             */
            AdjustToMaxMin = "adjusttomaxmin",
            /*
             * Clear the value to <i>null</i>.
             */
            Clear = "clear",
            /*
             * Restore the backup value to the specified property.
             */
            Restore = "restore",
            /*
             * Keep the last input and hold the old text.
             */
            CancelInput = "cancelinput",
            Keep = "keep",
        }

        export enum DateCursorPosition {
            Default = 0,
            Era = 1,
            Year = 2,
            Month = 3,
            Day = 4,
            AMPM = 5,
            Hour = 6,
            Minute = 7,
            Second = 8
        }


        export enum EllipsisMode {
            None = "none",
            EllipsisEnd = "ellipsisend",
            EllipsisPath = "ellipsispath",
        }


        export enum OutputMode {
            Append = "append",
            Replace = "replace",
        }

        export enum KanaMode {
            KatakanaHalf = "katakanahalf",
            Katakana = "katakana",
            Hiragana = "hiragana",
        }

        export enum ScrollBarMode {
            Automatic = "automatic",
            Fixed = "fixed",
        }

        export enum ScrollBars {
            None = "none",
            Horizontal = "horizontal",
            Vertical = "vertical",
            Both = "both",
        }

        export enum ShowLiterals {
            Always = "always",
            PostDisplay = "postdisplay",
            PreDisplay = "predisplay",
        }

        export enum ClipContent {
            /*
             * Literals are included.
             */
            IncludeLiterals = "includeliterals",
            /*
             * Literals are excluded.
             */
            ExcludeLiterals = "excludeliterals",
        }

        export enum DecimalMode {
            Cut = "cut",
            Filter = "filter",
        }

        export enum FocusType {
            None = 0,
            Click = 1,
            ClientEvent = 3,
            KeyExit = 4,
            Default = 5,
            ImeInput = 8,
            Left = 9,
            Right = 10,
            DragDrop = 11,
        }

        export enum ValidateMode {
            ValidateEx = "validateex",
            Validate = "validate",
            ValidateNone = "validatenone",
        }

        export enum CalendarType {
            MonthDay = "monthday",
            YearMonth = "yearmonth",
        }

        export enum SpinButtonAlignment {
            // /*
            //  * Display spin buttons in horizontal direction and two sides, SpinDown button at left.
            //  */
            // BothSidesDownLeft = "bothsidesdownleft",
            // /*
            //  * Display spin buttons in horizontal direction and two sides, SpinUp button at left.
            //  */
            // BothSidesUpLeft = "bothsidesupleft",
            // /*
            //  * Display spin buttons in horizontal direction and one side, SpinDown button at left.
            //  */
            // HorizontalDownLeft = "horizontaldownleft",
            // /*
            //  * Display spin buttons in horizontal direction and one side, SpinUp button at left.
            //  */
            // HorizontalUpLeft = "horizontalupleft",
            // /*
            //  * Display spin buttons in vertical direction as currently.
            //  */
            // Vertical = "vertical",

            LeftSide = "leftside",
            RightSide = "rightside",
        }

        export enum Rokuyou {
            None = 0x00,
            Senshou = 0x01,
            Tomobiki = 0x02,
            Senbu = 0x04,
            Butsumetsu = 0x08,
            Taian = 0x10,
            Shakkou = 0x20,
            All = 0x3f,
        }

        export enum EmptyRows {
            StartEmpty = 0,
            AllAtEnd = 1
        }

        export enum AllowSelection {
            Anyday = 0,
            Workday = 1,
            Holiday = 2
        }

        export enum Months {
            Default = 0,
            January = 1,
            February = 2,
            March = 3,
            April = 4,
            May = 5,
            June = 6,
            July = 7,
            August = 8,
            September = 9,
            October = 10,
            November = 11,
            December = 12
        }

        export enum DayOfWeek {
            NotSet = 0x00,
            Sunday = 0x01,
            Monday = 0x02,
            Tuesday = 0x04,
            Wednesday = 0x08,
            Thursday = 0x10,
            Friday = 0x20,
            Saturday = 0x40,
            All = 0x7F,
        }

        export enum CalendarYear {
            Normal = 0,
            Fiscal = 1
        }

        export enum CalendarSelectionMode {
            One = 0,
            MultiSimple = 1,
            MultiRich = 2
        }

        export enum CalendarNavigators {
            None = 0,
            Buttons = 1,
            ScrollBar = 2,
            Outlook = 3
        }

        export enum NavigatorOrientation {
            Left = 0,
            Top = 1,
            Right = 2,
            Bottom = 3
        }

        export enum CalendarUpdateType {
            Data = 1,
            All = 2
        }

        export enum ClearModeAction {
            /*
             * Clears the value to zero.
             */
            Zero = "zero",
            /*
             * Clears the value to null.
             */
            Null = "null",
        }

        export enum WeekFlags {
            NotSet = 0x00,
            First = 0x01,
            Second = 0x02,
            Third = 0x04,
            Fourth = 0x08,
            Fifth = 0x10,
            Last = 0x20,
            All = 0x3f,
        }

        export enum MonthFlags {
            NotSet = 0x0000,
            January = 0x0001,
            February = 0x0002,
            March = 0x0004,
            April = 0x0008,
            May = 0x0010,
            June = 0x0020,
            July = 0x0040,
            August = 0x0080,
            September = 0x0100,
            October = 0x0200,
            November = 0x0400,
            December = 0x0800,
            All = 0x0FFF,
        }

        export enum HolidayOverride {
            None = 0,
            NextDay = 1,
            NextWorkDay = 2
        }
        export enum DropDownButtonAlignment {
            LeftSide = "leftside",
            RightSide = "rightside",
        }

        export enum Alignment{
            NotSet = 'notset',
            TopLeft = 'top-left',
            TopCenter = 'top-center',
            TopRight = 'top-right',
            MiddleLeft = 'middle-left',
            MiddleCenter = 'middle-center',
            MiddleRight = 'middle-right',
            BottomLeft = 'bottom-left',
            BottomCenter = 'bottom-center',
            BottomRight = 'bottom-right',
        }

        export enum Interval {
            Default = 1,
            IntervalOf5 = 5,
            IntervalOf10 = 10,
            IntervalOf15 = 15,
            IntervalOf20 = 20,
            IntervalOf30 = 30
        }

        export enum PickerType {
            DateTime = "datetime",
            Date = "date",
            Time = "time"
        }

        export enum GcDateTimePickerEvent{
            SelectedDateChanged="selecteddatechanged"
        }
        
        export enum DateDropDownType {
            Picker = "picker",
            Calendar = "calendar"
        }

        export enum ListBoxSelectionMode {
            Single = "single",
            Multiple = "multiple",
            MultipleExt = "multipleExt",
        }

        export enum GcListBoxEvent{
            CheckedChanged = 'checkedchanged',
            SelectedChanged = 'selectedchanged',
            FocusedChanged = 'focusedchanged',
            ItemClick = 'itemclick',
            LoadComplete = 'loadcomplete',       
            ItemsChanged = 'itemschanged',
        }

        export enum GcComboBoxEvent{
            SelectedChanged = 'selectedchanged',
            CheckedChanged = 'checkedchanged',
            DropDownClosed = 'dropdownclosed',
            DropDownOpened = 'dropdownopened',
            TextChanged = 'textchanged',
            SpinDown = 'spindown',
            SpinUp = 'spinup',
            ItemsChanged = 'itemschanged',
        }

        export enum AutoFilter{
            None = 'none',
            Contains = 'contains',
            StartWith = 'startwith',
            AmbiguousContains = 'ambiguouscontains',
            AmbiguousStartWith = 'ambiguousstartwith',
        }

        export enum FilterComparator {
            Contains = 'contains',
            NotContains = 'notcontains',
            Equal = 'equal',
            NotEqual = 'notequal',
            EndWith = 'endwith',
            StartWith = 'startwith',
            AmbiguousContains = 'ambiguouscontains',
            AmbiguousNotContains = 'ambiguousnotcontains',
            AmbiguousEqual = 'ambiguousequal',
            AmbiguousNotEqual = 'ambiguousnotequal',
            AmbiguousEndWith = 'ambiguousendwith',
            AmbiguousStartWith = 'ambiguousstartwith',
        }

        export enum TipDirection {
            Top = 'top',
            Left = 'left',
            Right = 'right',
            Bottom = 'bottom'
        }

        export enum TipPosition {
            Start = 'start',
            Balanced = 'balanced',
            End = 'end'
        }

        export enum IconDirection {
            Inside = 'inside',
            Outside = 'outside',
        }

        export enum ExitKey {
            Enter = 'enter',
            ShiftEnter = 'shiftenter',
            Both = 'both',
            None = 'none'
        }

        export enum ValidateType {
            Required = 'required',
            OutOfRange = 'outofrange',
        }

        export enum ValidateWhen {
            LostFocus = 'lostfocus',
            Typing = 'typing',
            Manual = 'manual'
        }

        export enum GcValidatorEvent {
            ValidationFailed = 'validationfailed'
        }

        export interface PickerConfig {
            minDate?: Date | string | number,
            maxDate?: Date | string | number,
            type?: PickerType;
            minuteInterval?: Interval;
            secondsInterval?: Interval;
            hasSeconds?: boolean;
            selectedValue?: Date;
            yearFormat?:(curDate:Date) => string;
            monthFormat?:(curDate:Date) => string;
            dayFormat?:(curDate:Date) => string;
        }
        export interface IGcDropDownNumericPadConfig {
            addDropDownButton?: boolean;
            width?: string | number;
            height?: string | number;
        }
        export interface IDropDownOwner {
            getValue(): any;
            syncValueFromDropDown(v: any): any;
            performKeyDown(keyCode: number): any;
            performKeyPress(char: string, keyCode: number): any;
            getOriginalInputElement(): HTMLInputElement | HTMLTextAreaElement;
            getUIInputElement(): HTMLInputElement | HTMLTextAreaElement;
            getLayoutElement(): HTMLElement;
            getReadOnly(): boolean;
            paste(): any;
            cut(): any;
            copy(): any;
            delete(): any;
            undo(): any;
            canUndo(): any;
            getSelectionLength(): any;
            getPasswordMode(): boolean;
            getUseClipboard(): boolean;
        }
        export interface IDropDown {
            getValue(): any;
            setValue(v: any): any;
            toggleOpen(): any;
            close(): any;
        }
        export interface IDropDownContainer {
            toggleOpen(): any;
            close(): any;
            open(): any;
            onOpen(f: (e: IDropDownContainer) => any): any;
            onClose(f: (e: IDropDownContainer) => any): any;
            setWidth(v: string | number): any;
            setHeight(v: string | number): any;
            getElement(): HTMLElement;
            setInnerElement(el: HTMLElement): any;
            isOpened(): boolean;
            isClosed(): boolean;
        }
        export interface IDropdownConfiguration {
            inputEl: HTMLInputElement | HTMLTextAreaElement;
            width?: string | number;
            height?: string | number;
            template?: string | HTMLElement;
        }
        export interface IExtButton {
            btnEl: HTMLElement;
            onclick?: string;
            onhover?: string;
            id?: string;
        }
        export interface IUint8Array {
            buffer: any;
            byteLength: number;
            length: number;
        }
        export interface InputChangingEventArgs {
            Result: string;
            Cancel: boolean;
        }
        export interface IDateDataObject {
            Designators: Array<any>;
            AMDesignator: any;
            PMDesignator: any;
            AdjustValueOnFocus: any;
            CursorPosition: any;
            ExitOnLastChar: any;
            Hour12Mode: any;
            MidnightAs24: any;
            ImeMode: any;
            MinDate: any;
            MaxDate: any;
            MaxMinBehavior: any;
            PromptChar: any;
            ShowLiterals: any;
            TabAction: any;
            ValidateMode: any;
            TwoDigitYearMax: any;
        }
         export interface ListConfig{
            visibleItems?: number;
            itemHeight?: number;
            colHeaderHeight?: number;

            items?: any[];
            columns?: ColumnConfig[];
            showHeader?: boolean;

            valueMemberPath?: string;
            displayMemberPath?: string;

            showCheckBox?: boolean;
            checkOnClick?: boolean;

            itemTemplate?: string | string[];
            headerTemplate?: string;
            footerTemplate?: string;

            load?: (context: ILoadContext) => void;
            pageSize?: number;
            virtualMode?: boolean;

            generatingItem?: (args: IItemGeneratingArgs) => void;
            selectTemplate?: (args: ITemplateSelectArgs) => string;
            formatItem?: (args: IItemArgs) => void;

            allowColumnResize?: boolean;
        }
        export interface ListBoxConfig extends ListConfig{
            width?: number;
            height?: number;
            
            multiColumn?: boolean;
            selectionMode?: ListBoxSelectionMode;
            allowResize?: boolean;
            overflow?: string;

            visible?: boolean;
            enabled?: boolean;
        }

        export interface IItemArgs{
            index: number;
            itemObject: object;
        }

        export interface IItemGeneratingArgs extends IItemArgs{
            item: HTMLElement;
        }

        export interface ITemplateSelectArgs extends IItemArgs{
            template: string[];
        }

        export interface ILoadContext{
            pageNumber: number;
            pageSize: number;
            lastItem: object;
            filter: FilterInfo[];
            sort: SortInfo;
            success(items: object[]): void;
            failed(err: string): void;
        }

         export interface ColumnConfig{
            name: string;
            label?: string;
            width?: number;
            isValuePath? :boolean;
            visible?:boolean;
            clickSort?: boolean;
            contentAlignment?: Alignment;
            headerAlignment?: Alignment;
        }

        export interface SortInfo{
            name: string;
            isAsc: boolean;
        }

        export interface FilterInfo{
            name: string;
            comparator: FilterComparator;
            filterString: string;
        }

        export interface ComboBoxEditorConfig {
            exitOnLeftRightKey?: ExitOnLeftRightKey;
            editMode?: EditMode;
            watermarkDisplayNullText?: string;
            highlightText?: boolean;
            watermarkNullText?: string;
            acceptsCrlf?: CrLfMode;
            useClipboard?: boolean;
            exitOnEnterKey?: ExitKey;
            ellipsis?: EllipsisMode;
            ellipsisString?: string;
            enabled?: boolean;
            visible?: boolean;
            readOnly?: boolean;
        }

        export interface ComboBoxConfig extends ListConfig, ComboBoxEditorConfig{
            showDropDownButton?: boolean;
            dropDownButtonPosition?: DropDownButtonAlignment;
            showSpinButton?: boolean;
            spinButtonPosition?: SpinButtonAlignment;
            isEditable?: boolean;
            dropDownWidth?: number;
            autoSelect?: boolean;
            dropDownHeight?: number;
            autoFilter?: AutoFilter;
            minPrefixLength?: number;
            isMultiSelect?: boolean;
            allowDropDownResize?: boolean;
            dropDownOverflow?: ScrollBars;
        }

        export interface TipConfig {
            direction?: string;
            position?: string;
            directionPriority?: Array<string>;
            template?: string;
            failMessage?: string;
            successMessage?: string;
        }

        export interface IconConfig {
            direction?: string;
            failIconSrc?: string;
            successIconSrc?: string;
            failMessage?: string;
            successMessage?: string;
        }

        export interface ValidateSetting {
            items: Array<ValidateItem>;
            defaultNotify?: NotifySetting | NotifySettings;
        }

        export interface ValidateItem {
            control: GcInputManBase | GcComboBox;
            ruleSet: Array<ValidateRuleItem>;
            validateWhen?: ValidateWhen;
            notify?: NotifySetting | NotifySettings;
        }

        export interface ValidateRuleItem {
            rule: string | ((control: GcInputManBase | GcComboBox, context: ValidateRuleItem) => boolean);
            successMessage?: string | ((control: GcInputManBase | GcComboBox, context: ValidateRuleItem) => string);
            failMessage?: string | ((control: GcInputManBase | GcComboBox, context: ValidateRuleItem) => string);
            [property: string]: any;
        }

        export interface NotifySettings {
            fail?: NotifySetting;
            success?: NotifySetting;
        }

        export interface NotifySetting {
            tip?: boolean | TipConfig;
            icon?: boolean | IconConfig;
            controlState?: boolean;
        }

         export interface GcInputManBaseConfig{
            visible?: boolean;
            enabled?: boolean;
            readOnly?: boolean;

            exitOnLeftRightKey?: ExitOnLeftRightKey;
            editMode?: EditMode;
            watermarkDisplayNullText?: string;
            watermarkNullText?: string;
            acceptsCrlf?: CrLfMode;
            useClipboard?: boolean;
            exitOnEnterKey?: ExitKey;
        }

        export interface GcTextBoxConfig extends GcInputManBaseConfig {
            autoConvert?: boolean;
            ellipsis?: EllipsisMode;
            ellipsisString?: string;
            format?: string;
            lengthAsByte?: boolean;
            maxLength?: number;
            passwordChar?: string;
            text?: string;
            useSystemPasswordChar?: boolean;
            IMEReadingStringAppend?: boolean;
            IMEReadingStringKanaMode?: KanaMode;
            IMEReadingStringEnableAlphabetReadingMapping?: boolean;
            exitOnLastChar?: boolean;
            highlightText?: boolean;
        }

        export interface GcMultiLineTextBoxConfig extends GcInputManBaseConfig {
            autoConvert?: boolean;
            countWrappedLine?: boolean;
            format?: string;
            lengthAsByte?: boolean;
            lines?: string[];
            maxLength?: number;
            maxLineCount?: number;
            scrollBarMode?: ScrollBarMode;
            scrollBars?: ScrollBars;
            text?: string;
            wordWrap?: boolean;
            acceptsReturn?: boolean;
            acceptsTab?: boolean;
            IMEReadingStringAppend?: boolean;
            IMEReadingStringKanaMode?: KanaMode;
            height?: number;
            IMEReadingStringEnableAlphabetReadingMapping?: boolean;
            exitOnLastChar?: boolean;
            highlightText?: boolean;
        }

        export interface GcMaskConfig extends GcInputManBaseConfig{
            autoConvert?: boolean;
            value?: any;
            formatPattern?: string;
            promptChar?: string;
            showLiterals?: ShowLiterals;
            tabAction?: TabAction;
            text?: string;
            clipContent?: ClipContent;
            showSpinButton?: boolean;
            spinButtonPosition?: SpinButtonAlignment;
            allowSpin?: boolean;
            exitOnLastChar?: boolean;
            highlightText?: HighlightText;
        }

        export interface GcNumberConfig extends GcInputManBaseConfig{            
            value?: any;
            text?: string;
            watermarkZeroText?: string;
            formatDigit?: string;
            displayPositivePrefix?: string;
            displayFormatDigit?: string;
            maxValue?: number | string;
            minValue?: number | string;
            positivePrefix?: string;
            positiveSuffix?: string;
            displayPositiveSuffix?: string;
            negativePrefix?: string;
            displayNegativePrefix?: string;
            negativeSuffix?: string;
            displayNegativeSuffix?: string;
            valueSign?: ValueSign;
            adjustValueOnFocus?: boolean;
            allowDeleteToNull?: boolean;
            clearAction?: ClearModeAction;
            acceptsDecimal?: DecimalMode;
            currencySymbol?: string;
            decimalPoint?: string;
            maxMinBehavior?: MaxMinBehavior;
            separator?: string;
            watermarkDisplayZeroText?: string;
            showSpinButton?: boolean;
            spinButtonPosition?: SpinButtonAlignment;
            showNumericPad?: boolean;
            numericPadPosition?: DropDownButtonAlignment;
            highlightText?: boolean;
            allowSpin?: boolean;
        }

        export interface GcDateTimeCalendarConfig {
            maxDate?: Date;
            minDate?: Date;
            allowSelection?: AllowSelection;
            emptyRows?: EmptyRows;
            firstDayOfWeek?: DayOfWeek;
            firstFiscalMonth?: Months;
            firstMonthInView?: Months;
            yearMonthFormat?: string;
            headerFormat?: string;
            showZoomButton?: boolean;
            showRokuyou?: Rokuyou;
            showHeader?: boolean;
            showToday?: boolean;
            showWeekNumber?: boolean;
            showTrailing?: boolean;
            calendarYear?: CalendarYear;
            calendarDimensions?: Dimensions;
            showNavigator?: CalendarNavigators;
            navigatorOrientation?: NavigatorOrientation;
            overrideTipText?: string;
            calendarType?: CalendarType;
        }

        export interface GcCalendarConfig extends GcDateTimeCalendarConfig{
            visible?: boolean;
            maxSelectionCount?: number;
            selectionMode?: CalendarSelectionMode;
            selectedDate?: Date;
            enabled?: boolean;
            weekTitleSelect?: boolean;
            weekNumberSelect?: boolean;
            focusDate?: Date;
        }

        export interface GcDateTimeDropDownConfig extends GcDateTimeCalendarConfig , PickerConfig {
            minDate?: Date;
            maxDate?: Date;
            dropDownType?: DateDropDownType;
        }

        export interface Dimensions{
            width: number;
	        height: number;
        }

        export interface GcDateTimeConfig extends GcInputManBaseConfig{
            text?: string;
            maxDate?: Date | string;
            minDate?: Date | string;
            formatPattern?: string;
            spinIncrement?: number;
            spinOnKeys?: boolean;
            spinWrap?: boolean;
            allowSpin?: boolean;
            displayFormatPattern?: string;
            watermarkEmptyEraText?: string;
            promptChar?: string;
            AMDesignator?: string;
            PMDesignator?: string;
            twoDigitYearMax?: number;
            hour12Mode?: Hour12Mode;
            tabAction?: TabAction;
            maxMinBehavior?: MaxMinBehavior;
            midnightAs24?: boolean;
            showLiterals?: ShowLiterals;
            adjustValueOnFocus?: boolean;
            useTwoDigitYearMax?: boolean;
            validateMode?: ValidateMode;
            clipContent?: ClipContent;
            value?: Date | string;
            watermarkDisplayEmptyEraText?: string;
            showSpinButton?: boolean;
            spinButtonPosition?: SpinButtonAlignment;
            showDropdownButton?: boolean;
            dropDownButtonAlignment?: DropDownButtonAlignment;
            dropDownConfig?: GcDateTimeDropDownConfig;
            exitOnLastChar?: boolean;
            highlightText?: HighlightText;
        }

        export abstract class GcInputManBase {
            constructor(inputEl: HTMLInputElement | HTMLTextAreaElement , option?: GcInputManBaseConfig);
            getValue(): any;
            getEnabled(): boolean;
            setEnabled(v: boolean): void;
            getReadOnly(): boolean;
            setVisible(v: boolean): void;
            getOriginalInputElement(): HTMLInputElement | HTMLTextAreaElement;
            getUIInputElement(): HTMLInputElement | HTMLTextAreaElement;
            getLayoutElement(): HTMLElement;
            abstract setExitOnLastChar(v: boolean): any;
            abstract setEditMode(v: EditMode): any;
            abstract setExitOnLeftRightKey(v: ExitOnLeftRightKey): any;
            abstract setText(value: string): any;
            abstract setWatermarkDisplayNullText(v: string): any;
            abstract setValue(v: any): any;
            abstract setHighlightText(v: HighlightText | boolean): any;
            abstract setSelectedText(v: string): any;
            abstract setWatermarkNullText(v: string): any;
            abstract clear(): any;
            abstract getText(): any;
            abstract getSelectedText(): any;
            abstract getDisplayText(): any;
            abstract getSelectionStart(): any;
            abstract onEditStatusChanged(f: Function): any;
            public removeEditStatusChanged(f: Function): void;
            abstract onInvalidInput(f: Function): any;
            public removeInvalidInput(f: Function): void;
            abstract onKeyExit(f: Function): any;
            public removeKeyExit(f: Function): void;
            abstract onSpinDown(f: Function): any;
            public removeSpinDown(f: Function): void;
            abstract onSpinUp(f: Function): any;
            public removeSpinUp(f: Function): void;
            abstract onTextChanged(f: Function): any;
            public removeTextChanged(f: Function): void;
            abstract setAcceptsCrlf(v: CrLfMode): any;
            abstract setClipContent(v: ClipContent): any;
            abstract setUseClipboard(v: boolean): any;
            abstract getIsOverwrite(): any;
            abstract getSelectionLength(): any;
            abstract setSelectionLength(v: number): any;
            abstract setSelectionStart(v: number): any;
            abstract setFocus(): any;
            abstract selectAll(): any;
            abstract deselectAll(): any;
            setReadOnly(v: boolean): void;
            onSyncValueToOriginalInput(cb: (value: any, originalInput: HTMLInputElement | HTMLTextAreaElement) => any): void;
            public setExitOnEnterKey(exitKey: ExitKey): void;
            public onInput(callBack: Function): void;
            public removeInput(callBack: Function): void;
            public onKeyDown(callBack: Function): void;
            public removeKeyDown(callBack: Function): void;
            public onKeyUp(callBack: Function): void;
            public removeKeyUp(callBack: Function): void;
            public onFocusOut(callBack: Function): void;
            public removeFocusOut(callBack: Function): void;
        }

        export class GcDateTime extends GcInputManBase {
            constructor(inputEl: HTMLInputElement, option?: GcDateTimeConfig);
            setExitOnLastChar(v: boolean): any;
            setEditMode(v: EditMode): any;
            setExitOnLeftRightKey(v: ExitOnLeftRightKey): any;
            setText(value: string): any;
            setWatermarkDisplayNullText(v: string): any;
            setValue(v: any): any;
            setHighlightText(v: HighlightText | boolean): any;
            setSelectedText(v: string): any;
            setWatermarkNullText(v: string): any;
            clear(): any;
            getText(): any;
            getSelectedText(): any;
            getDisplayText(): any;
            getSelectionStart(): any;
            onEditStatusChanged(f: Function): any;
            onInvalidInput(f: Function): any;
            onKeyExit(f: Function): any;
            onSpinDown(f: Function): any;
            onSpinUp(f: Function): any;
            onTextChanged(f: Function): any;
            setAcceptsCrlf(v: CrLfMode): any;
            setClipContent(v: ClipContent): any;
            setUseClipboard(v: boolean): any;
            getIsOverwrite(): any;
            getSelectionLength(): any;
            setSelectionLength(v: number): any;
            setSelectionStart(v: number): any;
            setFocus(): any;
            selectAll(): any;
            deselectAll(): any;
            setMaxDate(v: Date | string): void;
            setMinDate(v: Date): void;
            setNumber(v: number | string): void;
            setFormatPattern(v: string): void;
            setSpinIncrement(v: number): void;
            setSpinOnKeys(v: boolean): void;
            setSpinWrap(v: boolean): void;
            setAllowSpin(v: boolean): void;
            setDisplayFormatPattern(v: string): void;
            setWatermarkEmptyEraText(v: string): void;
            setPromptChar(v: string): void;
            setAMDesignator(v: string): void;
            setPMDesignator(v: string): void;
            setTwoDigitYearMax(v: number): void;
            setHour12Mode(v: Hour12Mode): void;
            setCursorPosition(v: DateCursorPosition): void;
            setTabAction(v: TabAction): void;
            setMaxMinBehavior(v: MaxMinBehavior): void;
            setMidnightAs24(v: boolean): void;
            setShowLiterals(value: ShowLiterals): void;
            setAdjustValueOnFocus(value: boolean): void;
            setUseTwoDigitYearMax(value: boolean): void;
            setValidateMode(value: ValidateMode): void;
            setWatermarkDisplayEmptyEraText(value: string): void;
            doSpinDown(param1?: any, param2?: any): void;
            doSpinUp(param1?: any, param2?: any): void;
            getNumber(): number;
            getCurrentField(): DateCursorPosition;
            addSpinButton(alignment: SpinButtonAlignment): void;
            onInvalidRange(f: Function): void;
            removeInvalidRange(f: Function): void;
            onInvalidValue(f: Function): void;
            removeInvalidValue(f: Function): void;
            onNumberChanged(f: Function): void;
            removeNumberChanged(f: Function): void;
            onValueChanged(f: Function): void;
            removeValueChanged(f: Function): void;
            addDropDownCalendar(dropDownButtonAlignment?: DropDownButtonAlignment): void;
            addDropDown(dropDownButtonAlignment?: DropDownButtonAlignment,dateDropDownTYpe?:DateDropDownType): void;           
            getDropDownCalendar(): GcDropDownCalendar;
            setMaxDate(v: Date | string): void;
            setMinDate(v: Date | string): void;
            doSpinDown(param1?: any, param2?: any): void;
            doSpinUp(param1?: any, param2?: any): void;
        }

        export class GcNumber extends GcInputManBase {
            constructor(inputEl: HTMLInputElement, option?: GcNumberConfig);

            setExitOnLastChar(v: boolean): any;
            setEditMode(v: EditMode): any;
            setExitOnLeftRightKey(v: ExitOnLeftRightKey): any;
            setText(value: string): any;
            setWatermarkDisplayNullText(v: string): any;
            setValue(v: any): any;
            setHighlightText(v: HighlightText | boolean): any;
            setSelectedText(v: string): any;
            setWatermarkNullText(v: string): any;
            clear(): any;
            getText(): any;
            getSelectedText(): any;
            getDisplayText(): any;
            getSelectionStart(): any;
            onEditStatusChanged(f: Function): any;
            onInvalidInput(f: Function): any;
            onKeyExit(f: Function): any;
            onSpinDown(f: Function): any;
            onSpinUp(f: Function): any;
            onTextChanged(f: Function): any;
            setAcceptsCrlf(v: CrLfMode): any;
            setClipContent(v: ClipContent): any;
            setUseClipboard(v: boolean): any;
            getIsOverwrite(): any;
            getSelectionLength(): any;
            setSelectionLength(v: number): any;
            setSelectionStart(v: number): any;
            setFocus(): any;
            selectAll(): any;
            deselectAll(): any;
            setWatermarkZeroText(value: string): void;
            setFormatDigit(v: string): void;
            setDisplayFormatDigit(v: string): void;
            setMaxValue(v: string | number): void;
            setMinValue(v: string | number): void;
            setPositivePrefix(v: string): void;
            setDisplayPositivePrefix(v: string): void;
            setPositiveSuffix(v: string): void;
            setDisplayPositiveSuffix(v: string): void;
            setNegativePrefix(v: string): void;
            setDisplayNegativePrefix(v: string): void;
            setNegativeSuffix(v: string): void;
            setDisplayNegativeSuffix(v: string): void;
            setValueSign(v: ValueSign): void;
            setAdjustValueOnFocus(v: boolean): void;
            setAllowDeleteToNull(v: boolean): void;
            setClearAction(v: ClearModeAction): void;
            setAcceptsDecimal(v: DecimalMode): void;
            setCurrencySymbol(v: string): void;
            setDecimalPoint(v: string): void;
            setMaxMinBehavior(v: MaxMinBehavior): void;
            setSeparator(v: string): void;
            doSpinDown(param1?: any, param2?: any): void;
            doSpinUp(param1?: any, param2?: any): void;
            setWatermarkDisplayZeroText(value: string): void;
            addSpinButton(alignment: SpinButtonAlignment): void;
            onInvalidRange(callBack: Function): void;
            removeInvalidRange(callBack: Function): void;
            onValueChanged(callBack: Function): void;
            removeValueChanged(callBack: Function): void;
            addDropDownNumericPad(dropDownButtonAlignment?: DropDownButtonAlignment): this;

        }

        export class GcCalendar {
            constructor(container: HTMLElement, id: string, option?: GcCalendarConfig)
            private _suspendLayout;
            setFocusDate(value: Date): this;
            getFocusDate(): Date;
            setMaxDate(value: Date): void;
            setMinDate(value: Date): void;
            setMaxSelectionCount(value: number): void;
            setSelectionMode(value: CalendarSelectionMode): void;
            setSelections(value: Array<Date>): this;
            getSelections(): Array<Date>;
            setAllowSelection(value: AllowSelection): void;
            setSelectedDate(value: Date, disableEvents?: boolean): this;
            getSelectedDate(): Date;
            setEmptyRows(value: EmptyRows): void;
            setEnabled(value: boolean): this;
            setFirstDayOfWeek(value: DayOfWeek): void;
            setFirstFiscalMonth(value: Months): void;
            setFirstMonthInView(value: Months): void;
            setYearMonthFormat(value: string): void;
            setWeekTitleSelect(value: boolean): void;
            setWeekNumberSelect(value: boolean): void;
            setHeaderFormat(value: string): void;
            setShowZoomButton(value: boolean): void;
            setShowRokuyou(value: Rokuyou): void;
            setShowHeader(value: boolean): void;
            setShowToday(value: boolean): void;
            setShowWeekNumber(value: boolean): void;
            setShowTrailing(value: boolean): void;
            setCalendarType(value: CalendarType): this;
            setCalendarYear(value: CalendarYear): void;
            setVisible(value: boolean): this;
            setCalendarDimensions(width: number, height: number): void;
            setShowNavigator(value: CalendarNavigators): void;
            setNavigatorOrientation(value: NavigatorOrientation): void;
            setOverrideTipText(value: string): void;
            scrollMonth(value: number): this;
            scrollYear(value: number): this;
            getWeekday(weekday: string): WeekDay;
            getHolidayGroupIndex(item: HolidayGroup): number;
            getHolidayGroup(item: string | number): HolidayGroup;
            getHolidayGroupsCount(): number;
            addHolidayGroup(item: HolidayGroup): void;
            insertHolidayGroup(index: number, item: HolidayGroup): void;
            removeHolidayGroup(item: HolidayGroup): void;
            removeHolidayGroupAt(index: number): void;
            clearHolidayGroups(): void;
            onClickDate(callBack: (sender: GcCalendar, eArgs: any) => void): void;
            onScrolled(callBack: (sender: GcCalendar, eArgs: any) => void): void;
            onFocusDateChanged(callBack: (sender: GcCalendar, eArgs: any) => void): void;
            onSelectedDateChanged(callBack: (sender: GcCalendar, eArgs: any) => void): void;
        }

        export class GcMask extends GcInputManBase {
            constructor(inputEl: HTMLInputElement, option?: GcMaskConfig);
            setExitOnLastChar(v: boolean): any;
            setEditMode(v: EditMode): any;
            setExitOnLeftRightKey(v: ExitOnLeftRightKey): any;
            setText(value: string): any;
            setWatermarkDisplayNullText(v: string): any;
            setValue(v: any): any;
            setHighlightText(v: HighlightText | boolean): any;
            setSelectedText(v: string): any;
            setWatermarkNullText(v: string): any;
            clear(): any;
            getText(): any;
            getSelectedText(): any;
            getDisplayText(): any;
            getSelectionStart(): any;
            onEditStatusChanged(f: Function): any;
            onInvalidInput(f: Function): any;
            onKeyExit(f: Function): any;
            onSpinDown(f: Function): any;
            onSpinUp(f: Function): any;
            onTextChanged(f: Function): any;
            setAcceptsCrlf(v: CrLfMode): any;
            setClipContent(v: ClipContent): any;
            setUseClipboard(v: boolean): any;
            getIsOverwrite(): any;
            getSelectionLength(): any;
            setSelectionLength(v: number): any;
            setSelectionStart(v: number): any;
            setFocus(): any;
            selectAll(): any;
            deselectAll(): any;
            setAutoConvert(v: boolean): void;
            setCursorPosition(v: number): void;
            setFormatPattern(v: string): void;
            setPromptChar(v: string): void;
            setShowLiterals(v: ShowLiterals): void;
            setTabAction(v: TabAction): void;
            getValueIsFull(): boolean;
            setAllowSpin(v:boolean):void;
            getAllowSpin():boolean;
            getCurrentField(): number;
            onTextChanging(f: (sender: GcMask, eventArgs: InputChangingEventArgs) => any): void;
            removeTextChanging(f: Function): void;
            addSpinButton(alignment: SpinButtonAlignment): void;
            onValueChanged(f: Function): void;
            removeValueChanged(f: Function): void;
        }

        export class GcTextBox extends GcInputManBase {
            constructor(inputEl: HTMLInputElement, option?: GcTextBoxConfig);

            setExitOnLastChar(v: boolean): any;
            setEditMode(v: EditMode): any;
            setExitOnLeftRightKey(v: ExitOnLeftRightKey): any;
            setText(value: string): any;
            setWatermarkDisplayNullText(v: string): any;
            setValue(v: any): any;
            setHighlightText(v: HighlightText | boolean): any;
            setSelectedText(v: string): any;
            setWatermarkNullText(v: string): any;
            clear(): any;
            getText(): any;
            getSelectedText(): any;
            getDisplayText(): any;
            getSelectionStart(): any;
            onEditStatusChanged(f: Function): any;
            onInvalidInput(f: Function): any;
            onKeyExit(f: Function): any;
            onSpinDown(f: Function): any;
            onSpinUp(f: Function): any;
            onTextChanged(f: Function): any;
            setAcceptsCrlf(v: CrLfMode): any;
            setClipContent(v: ClipContent): any;
            setUseClipboard(v: boolean): any;
            getIsOverwrite(): any;
            getSelectionLength(): any;
            setSelectionLength(v: number): any;
            setSelectionStart(v: number): any;
            setFocus(): any;
            selectAll(): any;
            deselectAll(): any;
            setAutoConvert(v: boolean): void;
            setEllipsis(v: EllipsisMode): void;
            setEllipsisString(v: string): void;
            setFormat(v: string): void;
            setHighlightText(v: boolean): void;
            setLengthAsByte(v: boolean): void;
            setMaxLength(v: number): void;
            setPasswordChar(v: string): void;
            setIMEReadingStringKanaMode(v: KanaMode): void;
            setUseSystemPasswordChar(v: boolean): void;
            setIMEReadingStringAppend(v: boolean): void;
            getIMEReadingString(): string;
            clearIMEReadingString(v: string): void;
            onIMEReadingStringOutput(callBack: (sender: GcTextBox, args: { readingString: string }) => any): void;
			setIMEReadingStringEnableAlphabetReadingMapping(v:boolean):void;
        }
        export class GcMultiLineTextBox extends GcInputManBase {
            constructor(inputEl: HTMLTextAreaElement, option?: GcMultiLineTextBoxConfig);

            setExitOnLastChar(v: boolean): any;
            setEditMode(v: EditMode): any;
            setExitOnLeftRightKey(v: ExitOnLeftRightKey): any;
            setText(value: string): any;
            setWatermarkDisplayNullText(v: string): any;
            setValue(v: any): any;
            setHighlightText(v: HighlightText | boolean): any;
            setSelectedText(v: string): any;
            setWatermarkNullText(v: string): any;
            setHeight(v:string|number):any;
            clear(): any;
            getText(): any;
            getSelectedText(): any;
            getDisplayText(): any;
            getSelectionStart(): any;
            onEditStatusChanged(f: Function): any;
            onInvalidInput(f: Function): any;
            onKeyExit(f: Function): any;
            onSpinDown(f: Function): any;
            onSpinUp(f: Function): any;
            onTextChanged(f: Function): any;
            setAcceptsCrlf(v: CrLfMode): any;
            setClipContent(v: ClipContent): any;
            setUseClipboard(v: boolean): any;
            getIsOverwrite(): any;
            getSelectionLength(): any;
            setSelectionLength(v: number): any;
            setSelectionStart(v: number): any;
            setFocus(): any;
            selectAll(): any;
            deselectAll(): any;
            setAutoConvert(v: boolean): void;
            setCountWrappedLine(v: boolean): void;
            setFormat(v: string): void;
            setHighlightText(v: boolean): void;
            setLengthAsByte(v: boolean): void;
            setLines(v: string[]): void;
            setMaxLength(v: number): void;
            setMaxLineCount(v: number): void;
            setIMEReadingStringKanaMode(v: KanaMode): void;
            setScrollBarMode(v: ScrollBarMode): void;
            setScrollBars(v: ScrollBars): void;
            setWordWrap(v: boolean): void;
            setAcceptsTab(v: boolean): void;
            setIMEReadingStringAppend(v: boolean): void;
            getIMEReadingString(): string;
            clearIMEReadingString(v: string): void;
            onIMEReadingStringOutput(callBack: (sender: GcMultiLineTextBox, args: { readingString: string }) => any): void;
            getLines(): string[];
			setIMEReadingStringEnableAlphabetReadingMapping(v:boolean):void;
			setAcceptsReturn(v:boolean):void;
        }

        export class GcDateTimePicker{
            constructor(ele:HTMLElement, option?: PickerConfig);
            addEventListener(eventName: GcDateTimePickerEvent, func: (sender: this, eventArgs?: object) => void): void;
            removeEventListener(eventName: GcDateTimePickerEvent, func?: (sender: this, eventArgs?: object) => void): void;
            
            setMaxDate(maxDate: Date | string | number): void ;
            setMinDate(minDate: Date | string | number): void;
            setPickerType(type: PickerType) :void;
            setValue(date: Date): void;
            setSecondsInterval(interval: Interval):void;
            setMinuteInterval(interval: Interval):void;
            setVisible(visible:boolean):void;
            getValue(): Date;
            showSeconds(v: boolean):void;
            showMidnightAs24(value: boolean): void;
        }
        export class GcDropDownPicker{
            constructor(dropDownOwner: IDropDownOwner, dropDownContainer: IDropDownContainer, config?: PickerConfig)
            onSelectedDateChanged(callback: (eArgs:any) => void):void;
            setSelectedDate(value: Date):void;
            getSelectedDate():Date;
            setMaxDate(value: Date):void;
            setMinDate(value: Date):void;
            setPickerType(type: PickerType):void;
            setMinuteInterval(interval: Interval):void;
            setSecondsInterval(interval: Interval):void;
        }

        export class GcListBox {
            constructor(ele: HTMLSelectElement | HTMLInputElement | HTMLElement, option?: ListBoxConfig)
            addEventListener(eventName: GcListBoxEvent, func: (sender: this, eventArgs?: object) => void): void;
            removeEventListener(eventName: GcListBoxEvent, func?: (sender: this, eventArgs?: object) => void): void;

            filter(filterInfos: FilterInfo[]): void;
            sort(sortInfo: SortInfo): void;

            setItems(items: object[]): void;
            addItem(item: object): void;
            addItems(items: object[]): void;
            insertItem(item: object, start: number): void;
            insertItems(items: object[], start: number): void;
            getItems(): object[];

            setColumns(cols: ColumnConfig[]): void;
            addColumn(col: ColumnConfig, insertIndex: number):void;
            deleteColumn(colName: string): void;

            getCheckedItems(): object[];
            getCheckedIndices(): number[];
            setCheckedIndices(indices: number[]): void;
            setCheckedIndex(index: number): void;
            clearChecked(): void;

            getSelectedItems(): object[];
            getSelectedItem(): object;
            getSelectedIndices(): number[];
            getSelectedIndex(): number;
            setSelectedIndices(indices: number[]): void;
            setSelectedIndex(index: number): void;
            getSelectedValues(): any[];
            getSelectedValue(): any;
            clearSelected(): void;

            findString(str: string, start?: number, col?: string): number;
            findStringExact(str: string, start?: number, col?: string): number;

            focus(): void;
            layout(): void;
            refresh(): void;
            resize(height: number, width: number): void;
            resizeWidth(width: number): void;
            resizeHeight(height: number): void;

            setVisibleItemCount(count: number): void;
            setVirtualMode(value: boolean): void;
            setOverflow(value: string): void;
            setAllowResize(value: boolean): void;
            setSelectionMode(mode: string): void;
            updateColumnWidth(col: string, width: number): void;
            setItemHeight(height: number): void;
            setCheckOnClick(value: boolean): void;
            setAllowColumnResize(value: boolean): void;

            setVisible(value: boolean): void;
            setEnabled(value: boolean): void;
        }

        export class GcComboBox{
            constructor(ele: HTMLSelectElement, option?: ComboBoxConfig);
            addEventListener(eventType: GcComboBoxEvent, listener: (sender: this, eventArgs?: object) => void): void;
            removeEventListener(eventType: GcComboBoxEvent, listener: (sender: this, eventArgs?: object) => void): void;

            getDisplayText(): string;

            getSelectedValue(): any;
            getCheckedValues(): any[];
            getSelectedItem(): object;
            getCheckedItems(): object[];
            getSelectedIndex(): number;
            getCheckedIndices(): number[];

            setSelectedValue(value: any): void;
            setCheckedValues(value: any[]): void;
            setSelectedItem(item: object): void;
            setCheckedItems(items: object[]): void;
            setSelectedIndex(index: number): void;
            setCheckedIndices(indices: number[]): void;
            clearSelected(): void;
            clearChecked(): void;

            setItems(items: object[]): void;
            addItem(item: object): void;
            insertItem(item: object, start: number): void;
            insertItems(items: object[], start: number): void;
            addItems(items: object[]): void;
            getItems(): object[];

            findString(str: string, start?: number, col?: string): number;
            findStringExact(str: string, start?: number, col?: string): number;

            setAllowDropDownResize(value: boolean): void;
            setAllowColumnResize(value: boolean): void;
            addSpinButton(leftSide: boolean): void;
            setAutoFilter(type: AutoFilter): void;
            setAutoSelect(value: boolean): void;

            doSpinUp(increment?: number): void;
            doSpinDown(increment?: number): void;
            setEditable(value: boolean): void;
            setReadOnly(value: boolean): void;
            getReadOnly(): boolean;
            setWatermarkDisplayNullText(v: string): void;
            setWatermarkNullText(v: string): void;
            setAcceptsCrlf(v: CrLfMode): void;
            setEditMode(v: EditMode): void;
            setEllipsis(v: EllipsisMode): void;
            setEllipsisString(v: string): void;
            setExitOnLeftRightKey(v: ExitOnLeftRightKey): void;
            setHighlightText(v: boolean): void;
            getIsOverwrite(): boolean;
            setUseClipboard(v: boolean): void;
            setExitOnEnterKey(v: ExitKey): void;
            setEnabled(v: boolean): void;
            setVisible(v: boolean): void;
        }

        export class GcDropDownCalendar {
            constructor(dropDownOwner: IDropDownOwner, dropDownContainer: IDropDownContainer);
            setFocusDate(value: Date): void;
            setMaxDate(value: Date): void;
            setMinDate(value: Date): void;
            setAllowSelection(value: AllowSelection): void;
            setEmptyRows(value: EmptyRows): void;
            setFirstDayOfWeek(value: DayOfWeek): void;
            setFirstMonthInView(value: Months): void;
            setYearMonthFormat(value: string): void;
            setHeaderFormat(value: string): void;
            setShowZoomButton(value: boolean): void;
            setShowRokuyou(value: Rokuyou): void;
            setShowHeader(value: boolean): void;
            setShowToday(value: boolean): void;
            setShowWeekNumber(value: boolean): void;
            setShowTrailing(value: boolean): void;
            setCalendarType(value: CalendarType): void;
            setCalendarDimensions(width: number, height: number): void;
            setShowNavigator(value: CalendarNavigators): void;
            setNavigatorOrientation(value: NavigatorOrientation): void;
            setOverrideTipText(value: string): void;
            getHolidayGroup(indexOrName: string): HolidayGroup;
            addHolidayGroup(item: HolidayGroup): void;
            clearHolidayGroups(): void;
            insertHolidayGroup(index: number, item: HolidayGroup): void;
            removeHolidayGroup(item: HolidayGroup): void;
            getWeekday(weekday: string): WeekDay;
        }

        class HolidayGroup {
            constructor(name?: string, isActive?: boolean);
            getHoliday(index: number): Holiday;
            getHolidaysCount(): number;
            getHolidayIndex(item: Holiday): number;
            addHoliday(item: Holiday| ForceHoliday | ForceWorkday | ForceDayOfWeekHoliday | ForceDayOfWeekWorkday): void;
            clearHolidays(): void;
            insertHoliday(index: number, item: Holiday): void;
            removeHoliday(item: Holiday): void;
            removeHolidayAt(index: number): void;
            getIsActive(): boolean;
            setIsActive(isActive: boolean): void;
            setOverride(weekday: string, overrideFlag: HolidayOverride): void;
            getOverride(weekday: string): HolidayOverride;
            setWeekFlags(weekday: string, flags: WeekFlags): void;
            getWeekFlags(weekday: string): WeekFlags;
        }

        export class Holiday {
            constructor(name?: string, startMonth?: number, startDay?: number, endMonth?: number, endDay?: number);
            setName(value: string): void;
            getName(): string;
            setStartMonth(value: number): void;
            getStartMonth(): number;
            setStartDay(value: number): void;
            getStartDay(): number;
            setEndMonth(value: number): void;
            getEndMonth(): number;
            setEndDay(value: number): void;
            getEndDay(): number;
            isHoliday(date: Date): boolean;
        }

        export class ForceHoliday {
            constructor(name?: string, startDate?: Date, endDate?: Date);
            setName(value: string): void;
            getName(): string;
            setStart(value: any): void;
            getStart(): Date;
            setEnd(value: any): void;
            getEnd(): Date;
            isHoliday(date: Date): boolean;
        }

        export class ForceWorkday {
            constructor(name?: string, startDate?: Date, endDate?: Date);
            setName(value: string): void;
            getName(): string;
            setStart(value: any): void;
            getStart(): Date;
            setEnd(value: any): void;
            getEnd(): Date;
            isHoliday(date: Date): boolean;
        }

        export class ForceDayOfWeekWorkday {
            constructor(name?: string, year?: number, month?: number, dayOfWeekInMonth?: WeekFlags, dayOfWeek?: DayOfWeek);
            getIsYearly(): boolean;
            setYear(value: number): void;
            getYear(): number;
            setName(value: string): void;
            getName(): string;
            setMonth(value: MonthFlags): void;
            getMonth(): MonthFlags;
            setDayOfWeekInMonth(value: WeekFlags): void;
            getDayOfWeekInMonth(): WeekFlags;
            setDayOfWeek(value: DayOfWeek): void;
            getDayOfWeek(): DayOfWeek;
            isHoliday(date: Date): boolean;
        }

        export class DayOfWeekHoliday {
            constructor(name?: string, month?: MonthFlags, dayOfWeekInMonth?: WeekFlags, dayOfWeek?: DayOfWeek);
            setName(value: string): void;
            getName(): string;
            setMonth(value: MonthFlags): void;
            getMonth(): MonthFlags;
            setDayOfWeekInMonth(value: WeekFlags): void;
            getDayOfWeekInMonth(): WeekFlags;
            setDayOfWeek(value: DayOfWeek): void;
            getDayOfWeek(): DayOfWeek;
            isHoliday(date: Date): boolean;
        }

        export class ForceDayOfWeekHoliday {
            constructor(name?: string, year?: number, month?: MonthFlags, dayOfWeekInMonth?: WeekFlags, dayOfWeek?: DayOfWeek);
            setYear(value: number): void;
            getYear(): number;
            setName(value: string): void;
            getName(): string;
            setMonth(value: MonthFlags): void;
            getMonth(): MonthFlags;
            setDayOfWeekInMonth(value: WeekFlags): void;
            getDayOfWeekInMonth(): WeekFlags;
            setDayOfWeek(value: DayOfWeek): void;
            getDayOfWeek(): DayOfWeek;
            isHoliday(date: Date): boolean;
        }

        export class WeekDay {
            constructor(owner: WeekdaysGroup);
            setDayName(value: string): void;
            getReflectToTitle(): boolean;
            setReflectToTitle(value: boolean): void;
            getWeekFlags(): WeekFlags;
            setWeekFlags(value: WeekFlags): void;
        }

        class WeekdaysGroup {
            constructor();
            private weekDays;
            weekDayChanged: Function;
            fireWeekDayChangedEvent(propertyName: string): void;
            monday(): WeekDay;
            tuesday(): WeekDay;
            wednesday(): WeekDay;
            thursday(): WeekDay;
            friday(): WeekDay;
            saturday(): WeekDay;
            sunday(): WeekDay;
            weekDay(index: number): WeekDay;
        }

        export class GcValidator {

            constructor(validateSetting: ValidateSetting);

            public validate(...controls: Array<GcInputManBase | GcComboBox>): boolean;

            public enable(...controls: Array<GcInputManBase | GcComboBox>): void;

            public disable(...controls: Array<GcInputManBase | GcComboBox>): void;

            public static registerValidateRule(keyword: string, validateFunc: (control: GcInputManBase | GcComboBox, item: ValidateRuleItem) => boolean): void;

            public static unRegisterValidateRule(keyword: string): void;

            public destroy(): void;

            public addEventListener(eventType: GcValidatorEvent, func: (sender: GcValidator, args: GcValidatorEventArgs) => void): void;

            public removeEventListener(eventType: GcValidatorEvent, func: (sender: GcValidator, args: GcValidatorEventArgs) => void): void;

        }

        export class GcTipNotifier {

            constructor(gcInputManControl: GcInputManBase | GcComboBox, tipConfig?: TipConfig);

            public setDirection(value: TipDirection): void;

            public setPosition(value: TipPosition): void;

            public setTemplate(value: string): void;

            public setDirectionPriority(value: Array<TipDirection>): void;

            public setFailMessage(value: string): void;

            public setSuccessMessage(value: string): void;

            public onFail(): void;

            public onSuccess(): void;

            public onClear(): void;

            public destroy(): void;

        }

        export class GcIconNotifier {

            constructor(gcInputManControl: GcInputManBase | GcComboBox, iconConfig?: IconConfig);

            public setFailMessage(value: string): void;

            public setSuccessMessage(value: string): void;

            public setDirection(value: IconDirection): void;

            public setFailIconSrc(value: string): void;

            public setSuccessIconSrc(value: string): void;

            public onFail(): void;

            public onSuccess(): void;

            public onClear(): void;

            public destroy(): void;

        }

        export class GcControlStateNotifier {

            constructor(gcInputManControl: GcInputManBase | GcComboBox);

            public onFail(): void;

            public onSuccess(): void;

            public onClear(): void;

            public destroy(): void;
        }

        export interface GcValidatorEventArgs {
            control: GcInputManBase | GcComboBox;
            context: ValidateRuleItem;
        }

    }
}

export = GC;