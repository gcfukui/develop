import { InputMan } from "@grapecity/inputman";
import { Spread } from "@grapecity/spread-sheets";
declare module InputManCellType {

    export enum DisplayType {
        Value = "value",
        Text = "text"
    }

    interface EventArgs {
        celltype: GcInputManCellType;
        sheet: Spread.Sheets.Worksheet;
        row: number;
        col: number;
        sheetArea: Spread.Sheets.SheetArea;
    }

    export interface GcInputManBaseConfig {
        exitOnLeftRightKey?: InputMan.ExitOnLeftRightKey;
        editMode?: InputMan.EditMode;
        watermarkNullText?: string;
        acceptsCrlf?: InputMan.CrLfMode;
        displayType?: DisplayType;
        invalidInput?: (eArgs: EventArgs) => void | string;
        input?: (eArgs: EventArgs) => void | string;
    }

    /**
     * @class
     * @param {object} [config] It's a optional setting object to init GcInputManBase.
     * @abstract
     * @memberof InputManCellType
     */
    export abstract class GcInputManCellType extends Spread.Sheets.CellTypes.Base {
        constructor(config?: GcInputManBaseConfig);

        /**
        * In edit mode, use direction keys to move to next or previous cell.
        * @type {InputMan.ExitOnLeftRightKey}
        */
        public exitOnLeftRightKey: InputMan.ExitOnLeftRightKey;
        /**
        * When input a new character, insert or override old character.
        * @type {InputMan.EditMode}
        */
        public editMode: InputMan.EditMode;
        /**
        * In edit mode and cell value is null, display this text.
        * @type {string}
        */
        public watermarkNullText: string;
        /**
        * In edit mode, how the newline is handled when copying cutting and pasting a string.
        * @type {InputMan.CrLfMode}
        */
        public acceptsCrlf: InputMan.CrLfMode;
        /**
        * In edit mode, indicate which kind of data returns to Spread Cell, include 'value' and 'Text'.
        * @type {DisplayType}
        */
        public displayType: DisplayType;
        /**
        * Event callback. In edit mode, occurs when input invalid char.
        * @type {Function}
        */
        public invalidInput: (eArgs: EventArgs) => void;
        /**
        * Event callback. In edit mode, occurs when input a new character.
        * @type {Function}
        */
        public input: (eArgs: EventArgs) => void;
    }

    export interface GcNumberCellTypeConfig extends GcInputManBaseConfig {
        watermarkZeroText?: string;
        formatDigit?: string;
        maxValue?: number | string;
        minValue?: number | string;
        positivePrefix?: string;
        positiveSuffix?: string;
        negativePrefix?: string;
        negativeSuffix?: string;
        valueSign?: InputMan.ValueSign;
        adjustValueOnFocus?: boolean;
        allowDeleteToNull?: boolean;
        acceptsDecimal?: InputMan.DecimalMode;
        currencySymbol?: string;
        decimalPoint?: string;
        maxMinBehavior?: InputMan.MaxMinBehavior;
        separator?: string;
        highlightText?: boolean;
        allowSpin?: boolean;
        showSpinButton?: InputMan.SpinButtonAlignment;
        spinButtonPosition?: string;
        showNumericPad?: boolean;
        numericPadPosition?: InputMan.DropDownButtonAlignment;
        spinDown?: (eArgs: EventArgs) => void | string;
        spinUp?: (eArgs: EventArgs) => void | string;
        invalidRange?: (eArgs: EventArgs) => void | string;
    }

    /**
     * @class
     * @param {object} config It's a optional setting object to init GcNumberCellType.
     * @memberof InputManCellType
     * @example
     * var workbook = new GC.Spread.Sheets.Workbook(document.getElementById("sheet"));
     * var worksheet = workbook.getActiveSheet();
     * worksheet.setCellType(1, 1, new Spread.Sheets.CellTypes.GcNumberCellType());
     */
    export class GcNumberCellType extends GcInputManCellType {
        constructor(config?: GcNumberCellTypeConfig);

        /**
        * In edit mode, when cell value equals to zero, display this text.
        * @type {string}
        */
        public watermarkZeroText: string;
        /**
        * In edit mode, set the number of digits that can be entered and the position of the decimal and thousand separator.
        * @type {string}
        */
        public formatDigit: string;
        /**
        * In edit mode, allowed maximum number.
        * @type {number | string}
        */
        public maxValue: number | string;
        /**
        * In edit mode, allowed minimum number.
        * @type {number | string}
        */
        public minValue: number | string;
        /**
        * When cell value is positive, use this text as prefix.
        * @type {string}
        */
        public positivePrefix: string;
        /**
        * When cell value is positive, use this text as suffix.
        * @type {string}
        */
        public positiveSuffix: string;
        /**
        * When cell value is negative, use this text as prefix.
        * @type {string}
        */
        public negativePrefix: string;
        /**
        * When cell value is negative, use this text as suffix.
        * @type {string}
        */
        public negativeSuffix: string;
        /**
        * In edit mode, control cell value is positive number or negative number.
        * @type {InputMan.ValueSign}
        */
        public valueSign: InputMan.ValueSign;
        /**
        * In edit mode and input date is invalid, adjust value immediately.
        * @type {boolean}
        */
        public adjustValueOnFocus: boolean;
        /**
        * In edit mode, allow user delete cell value to null.
        * @type {boolean}
        */
        public allowDeleteToNull: boolean;
        /**
        * In edit mode, control the decimal point to cut or filter.
        * @type {InputMan.DecimalMode}
        */
        public acceptsDecimal: InputMan.DecimalMode;
        /**
        * In edit mode, set the currency symbol to a literal character.
        * @type {string}
        */
        public currencySymbol: string;
        /**
        * In edit mode, set the character to be displayed as a decimal point.
        * @type {string}
        */
        public decimalPoint: string;
        /**
        * In edit mode, set how to adjust value when they are out of range.
        * @type {InputMan.MaxMinBehavior}
        */
        public maxMinBehavior: InputMan.MaxMinBehavior;
        /**
        * In edit mode, set the character to be displayed as thousand mark.
        * @type {string}
        */
        public separator: string;
        /**
        * When cell begin edit, select all text.
        * @type {boolean}
        */
        public highlightText: boolean;
        /**
        * In edit mode, set allow user spin cell value by a specific increment.
        * @type {boolean}
        */
        public allowSpin: boolean;
        /**
        * In edit mode, set how to copy data to the Clipboard. Reserve literals or not.
        * @type {InputMan.ClipContent}
        */
        public clipContent: InputMan.ClipContent;
        /**
        * Event callback. Occurs when user spin down, such as click spin down button press down key or mouse wheel.
        * @type {Function}
        */
        public spinDown: (eArgs: EventArgs) => void;
        /**
        * Event callback. Occurs when user spin up, such as click spin up button press up key or mouse wheel.
        * @type {Function}
        */
        public spinUp: (eArgs: EventArgs) => void;
        /**
        * Event callback. Occurs when user enter a out of range value.
        * @type {Function}
        */
        public invalidRange: (eArgs: EventArgs) => void;
    }

    export interface GcMaskCellTypeConfig extends GcInputManBaseConfig {
        autoConvert?: boolean;
        formatPattern?: string;
        promptChar?: string;
        showLiterals?: InputMan.ShowLiterals;
        clipContent?: InputMan.ClipContent;
        allowSpin?: boolean;
        exitOnLastChar?: boolean;
        showSpinButton?: boolean;
        spinButtonPosition?: InputMan.SpinButtonAlignment;
        spinUp?: (eArgs: EventArgs) => void | string;
        spinDown?: (eArgs: EventArgs) => void | string;
    }

    /**
     * @class
     * @param {object} config It's a optional setting object to init GcMaskCellType.
     * @memberof InputManCellType
     * @example
     * var workbook = new GC.Spread.Sheets.Workbook(document.getElementById("sheet"));
     * var worksheet = workbook.getActiveSheet();
     * worksheet.setCellType(1, 1, new Spread.Sheets.CellTypes.GcMaskCellType());
     */
    export class GcMaskCellType extends GcInputManCellType {
        constructor(config?: GcMaskCellTypeConfig);

        /**
        * In edit mode, set whether the character is automatically converted according to the format setting.
        * @type {boolean}
        */
        public autoConvert: boolean;
        /**
        * In edit mode, set cell input pattern.
        * @type {string}
        */
        public formatPattern: string;
        /**
        * In edit mode, set the prompt character to display when nothing is entered in current field.
        * @type {string}
        */
        public promptChar: string;
        /**
        * In edit mode, set whether to display literal string while typing.
        * @type {InputMan.ShowLiterals}
        */
        public showLiterals: InputMan.ShowLiterals;
        /**
        * In edit mode, set how to copy data to the Clipboard. Reserve literals or not.
        * @type {InputMan.ClipContent}
        */
        public clipContent: InputMan.ClipContent;
        /**
        * In edit mode, allow user spin cell value.
        * @type {boolean}
        */
        public allowSpin: boolean;
        /**
        * In edit mode, set whether to move the next cell automatically when finish last character.
        * @type {boolean}
        */
        public exitOnLastChar: boolean;
        /**
        * Event callback. Occurs when user spin up, such as click spin up button.
        * @type {Function}
        */
        public spinUp: (eArgs: EventArgs) => void;
        /**
        * Event callback. Occurs when user spin down, such as click spin down button.
        * @type {Function}
        */
        public spinDown: (eArgs: EventArgs) => void;
    }

    export interface GcDateTimeCalendarConfig {
        maxDate?: Date;
        minDate?: Date;
        allowSelection?: InputMan.AllowSelection;
        emptyRows?: InputMan.EmptyRows;
        firstDayOfWeek?: InputMan.DayOfWeek;
        firstFiscalMonth?: InputMan.Months;
        firstMonthInView?: InputMan.Months;
        yearMonthFormat?: string;
        headerFormat?: string;
        showZoomButton?: boolean;
        showRokuyou?: InputMan.Rokuyou;
        showHeader?: boolean;
        showToday?: boolean;
        showWeekNumber?: boolean;
        showTrailing?: boolean;
        calendarYear?: InputMan.CalendarYear;
        calendarDimensions?: InputMan.Dimensions;
        showNavigator?: InputMan.CalendarNavigators;
        navigatorOrientation?: InputMan.NavigatorOrientation;
        overrideTipText?: string;
        calendarType?: InputMan.CalendarType;
    }

    export interface PickerConfig {
        minDate?: Date | string | number,
        maxDate?: Date | string | number,
        type?: InputMan.PickerType;
        minuteInterval?: InputMan.Interval;
        secondsInterval?: InputMan.Interval;
        hasSeconds?: boolean;
        yearFormat?: (curDate: Date) => string;
        monthFormat?: (curDate: Date) => string;
        dayFormat?: (curDate: Date) => string;
    }

    export interface GcDateTimeDropDownConfig extends GcDateTimeCalendarConfig, PickerConfig {
        minDate?: Date;
        maxDate?: Date;
        dropDownType?: InputMan.DateDropDownType;
    }

    export interface GcDateTimeCellTypeConfig extends GcInputManBaseConfig {
        maxDate?: Date | string;
        minDate?: Date | string;
        formatPattern?: string;
        spinIncrement?: number;
        spinOnKeys?: boolean;
        spinWrap?: boolean;
        allowSpin?: boolean;
        watermarkEmptyEraText?: string;
        promptChar?: string;
        AMDesignator?: string;
        PMDesignator?: string;
        twoDigitYearMax?: number;
        hour12Mode?: InputMan.Hour12Mode;
        maxMinBehavior?: InputMan.MaxMinBehavior;
        midnightAs24?: boolean;
        showLiterals?: InputMan.ShowLiterals;
        adjustValueOnFocus?: boolean;
        useTwoDigitYearMax?: boolean;
        validateMode?: InputMan.ValidateMode;
        clipContent?: InputMan.ClipContent;
        exitOnLastChar?: boolean;
        showSpinButton?: boolean;
        spinButtonPosition?: InputMan.SpinButtonAlignment;
        showDropDownButton?: boolean;
        dropDownButtonAlignment?: InputMan.DropDownButtonAlignment;
        dropDownConfig?: GcDateTimeDropDownConfig;
        spinDown?: (eArgs: EventArgs) => void | string;
        spinUp?: (eArgs: EventArgs) => void | string;
        invalidRange?: (eArgs: EventArgs) => void | string;
        invalidValue?: (eArgs: EventArgs) => void | string;
    }

    /**
     * @class
     * @param {object} config It's a optional setting object to init GcDateTimeCellType.
     * @memberof InputManCellType
     * @example
     * var workbook = new GC.Spread.Sheets.Workbook(document.getElementById("sheet"));
     * var worksheet = workbook.getActiveSheet();
     * worksheet.setCellType(1, 1, new Spread.Sheets.CellTypes.GcDateTimeCellType());
     */
    export class GcDateTimeCellType extends GcInputManCellType {
        constructor(config?: GcDateTimeCellTypeConfig);

        /**
        * In edit mode, allowed maximum date.
        * @type {Date | string}
        */
        public maxDate: Date | string;
        /**
        * In edit mode, allowed maximum date.
        * @type {Date | string}
        */
        public minDate: Date | string;
        /**
        * In edit mode, control input pattern.
        * @type {string}
        */
        public formatPattern: string;
        /**
        * In edit mode, set spin increment. 
        * @type {number}
        */
        public spinIncrement: number;
        /**
        * In edit mode, set to allow use up and down key to spin.
        * @type {boolean}
        */
        public spinOnKeys: boolean;
        /**
        * In edit mode, set to allow spin circularly.
        * @type {boolean}
        */
        public spinWrap: boolean;
        /**
        * In edit mode, set allow user spin cell value by a specific increment.
        * @type {boolean}
        */
        public allowSpin: boolean;
        /**
        * In edit mode, set this text instead when cell's value cannot be displayed in the Japanese year.
        * @type {string}
        */
        public watermarkEmptyEraText: string;
        /**
        * In edit mode, set the prompt character to display when nothing is entered in the field.
        * @type {string}
        */
        public promptChar: string;
        /**
        * In edit mode, set the character replace morning format keyword.
        * @type {string}
        */
        public AMDesignator: string;
        /**
        * In edit mode, set the character replace afternoon format keyword.
        * @type {string}
        */
        public PMDesignator: string;
        /**
        * In edit mode, set the max year of two-digit year pattern.
        * @type {number}
        */
        public twoDigitYearMax: number;
        /**
        * In edit mode, set the text replaced 12th hour when used 12-hour system.
        * @type {InputMan.Hour12Mode}
        */
        public hour12Mode: InputMan.Hour12Mode;
        /**
        * In edit mode, set how to adjust value when they are out of range.
        * @type {InputMan.MaxMinBehavior}
        */
        public maxMinBehavior: InputMan.MaxMinBehavior;
        /**
        * In edit mode, set the text replaced midnight when used 24-hour system.
        * @type {boolean}
        */
        public midnightAs24: boolean;
        /**
        * In edit mode, set whether to display literal string while typing.
        * @type {InputMan.ShowLiterals}
        */
        public showLiterals: InputMan.ShowLiterals;
        /**
        * In edit mode and input date is invalid, adjust value immediately.
        * @type {boolean}
        */
        public adjustValueOnFocus: boolean;
        /**
        * In edit mode, set max year when use two digit year format.
        * @type {boolean}
        */
        public useTwoDigitYearMax: boolean;
        /**
        * In edit mode, choose validate mode such as no validate or validate totally.
        * @type {InputMan.ValidateMode}
        */
        public validateMode: InputMan.ValidateMode;
        /**
        * In edit mode, set how to copy data to the Clipboard. Reserve literals or not.
        * @type {InputMan.ClipContent}
        */
        public clipContent: InputMan.ClipContent;
        /**
        * In edit mode, set whether to automatically move to the next cell when finish typing.
        * @type {boolean}
        */
        public exitOnLastChar: boolean;
        /**
        * Event callback. Occurs when user spin down, such as click spin down button or press down key or mouse wheel.
        * @type {Function}
        */
        public spinDown: (eArgs: EventArgs) => void;
        /**
        * Event callback. Occurs when user spin up, such as click spin up button or press up key or mouse wheel.
        * @type {Function}
        */
        public spinUp: (eArgs: EventArgs) => void;
        /**
        * Event callback. Occurs when user input invalid date out of min date and max date.
        * @type {Function}
        */
        public invalidRange: (eArgs: EventArgs) => void;
        /**
        * Event callback. Occurs when user input invalid date such as month over 12.
        * @type {Function}
        */
        public invalidValue: (eArgs: EventArgs) => void;
    }
}

export = InputManCellType;